// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.seforge.paas.monitor.domain;

import java.lang.Boolean;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.seforge.paas.monitor.domain.Phym;
import org.seforge.paas.monitor.domain.PhymDataOnDemand;
import org.seforge.paas.monitor.domain.Vim;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect VimDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VimDataOnDemand: @Component;
    
    private Random VimDataOnDemand.rnd = new SecureRandom();
    
    private List<Vim> VimDataOnDemand.data;
    
    @Autowired
    private PhymDataOnDemand VimDataOnDemand.phymDataOnDemand;
    
    public Vim VimDataOnDemand.getNewTransientVim(int index) {
        Vim obj = new Vim();
        setIp(obj, index);
        setIsMonitee(obj, index);
        setName(obj, index);
        setPhym(obj, index);
        setPowerState(obj, index);
        setUuid(obj, index);
        return obj;
    }
    
    public void VimDataOnDemand.setIp(Vim obj, int index) {
        String ip = "ip_" + index;
        if (ip.length() > 15) {
            ip = new Random().nextInt(10) + ip.substring(1, 15);
        }
        obj.setIp(ip);
    }
    
    public void VimDataOnDemand.setIsMonitee(Vim obj, int index) {
        Boolean isMonitee = Boolean.TRUE;
        obj.setIsMonitee(isMonitee);
    }
    
    public void VimDataOnDemand.setName(Vim obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void VimDataOnDemand.setPhym(Vim obj, int index) {
        Phym phym = phymDataOnDemand.getRandomPhym();
        obj.setPhym(phym);
    }
    
    public void VimDataOnDemand.setPowerState(Vim obj, int index) {
        String powerState = "powerState_" + index;
        obj.setPowerState(powerState);
    }
    
    public void VimDataOnDemand.setUuid(Vim obj, int index) {
        String uuid = "uuid_" + index;
        obj.setUuid(uuid);
    }
    
    public Vim VimDataOnDemand.getSpecificVim(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Vim obj = data.get(index);
        return Vim.findVim(obj.getId());
    }
    
    public Vim VimDataOnDemand.getRandomVim() {
        init();
        Vim obj = data.get(rnd.nextInt(data.size()));
        return Vim.findVim(obj.getId());
    }
    
    public boolean VimDataOnDemand.modifyVim(Vim obj) {
        return false;
    }
    
    public void VimDataOnDemand.init() {
        data = Vim.findVimEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Vim' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.seforge.paas.monitor.domain.Vim>();
        for (int i = 0; i < 10; i++) {
            Vim obj = getNewTransientVim(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

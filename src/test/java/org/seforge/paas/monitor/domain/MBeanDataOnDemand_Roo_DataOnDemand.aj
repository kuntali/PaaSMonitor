// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.seforge.paas.monitor.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.seforge.paas.monitor.domain.MBean;
import org.springframework.stereotype.Component;

privileged aspect MBeanDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MBeanDataOnDemand: @Component;
    
    private Random MBeanDataOnDemand.rnd = new SecureRandom();
    
    private List<MBean> MBeanDataOnDemand.data;
    
    public MBean MBeanDataOnDemand.getNewTransientMBean(int index) {
        MBean obj = new MBean();
        setName(obj, index);
        return obj;
    }
    
    public void MBeanDataOnDemand.setName(MBean obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public MBean MBeanDataOnDemand.getSpecificMBean(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        MBean obj = data.get(index);
        return MBean.findMBean(obj.getId());
    }
    
    public MBean MBeanDataOnDemand.getRandomMBean() {
        init();
        MBean obj = data.get(rnd.nextInt(data.size()));
        return MBean.findMBean(obj.getId());
    }
    
    public boolean MBeanDataOnDemand.modifyMBean(MBean obj) {
        return false;
    }
    
    public void MBeanDataOnDemand.init() {
        data = MBean.findMBeanEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'MBean' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.seforge.paas.monitor.domain.MBean>();
        for (int i = 0; i < 10; i++) {
            MBean obj = getNewTransientMBean(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

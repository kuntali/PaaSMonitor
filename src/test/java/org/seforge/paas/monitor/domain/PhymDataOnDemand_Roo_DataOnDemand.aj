// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.seforge.paas.monitor.domain;

import java.lang.Boolean;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.seforge.paas.monitor.domain.Phym;
import org.springframework.stereotype.Component;

privileged aspect PhymDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhymDataOnDemand: @Component;
    
    private Random PhymDataOnDemand.rnd = new SecureRandom();
    
    private List<Phym> PhymDataOnDemand.data;
    
    public Phym PhymDataOnDemand.getNewTransientPhym(int index) {
        Phym obj = new Phym();
        setIp(obj, index);
        setIsMonitee(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void PhymDataOnDemand.setIp(Phym obj, int index) {
        String ip = "ip_" + index;
        if (ip.length() > 15) {
            ip = new Random().nextInt(10) + ip.substring(1, 15);
        }
        obj.setIp(ip);
    }
    
    public void PhymDataOnDemand.setIsMonitee(Phym obj, int index) {
        Boolean isMonitee = Boolean.TRUE;
        obj.setIsMonitee(isMonitee);
    }
    
    public void PhymDataOnDemand.setName(Phym obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void PhymDataOnDemand.setPassword(Phym obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void PhymDataOnDemand.setUsername(Phym obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public Phym PhymDataOnDemand.getSpecificPhym(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Phym obj = data.get(index);
        java.lang.Long id = obj.getId();
        return Phym.findPhym(id);
    }
    
    public Phym PhymDataOnDemand.getRandomPhym() {
        init();
        Phym obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return Phym.findPhym(id);
    }
    
    public boolean PhymDataOnDemand.modifyPhym(Phym obj) {
        return false;
    }
    
    public void PhymDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Phym.findPhymEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Phym' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.seforge.paas.monitor.domain.Phym>();
        for (int i = 0; i < 10; i++) {
            Phym obj = getNewTransientPhym(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

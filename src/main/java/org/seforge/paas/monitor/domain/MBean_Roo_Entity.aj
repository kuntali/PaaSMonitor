// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.seforge.paas.monitor.domain;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.seforge.paas.monitor.domain.MBean;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MBean_Roo_Entity {
    
    declare @type: MBean: @Entity;
    
    @PersistenceContext
    transient EntityManager MBean.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long MBean.id;
    
    @Version
    @Column(name = "version")
    private Integer MBean.version;
    
    public Long MBean.getId() {
        return this.id;
    }
    
    public void MBean.setId(Long id) {
        this.id = id;
    }
    
    public Integer MBean.getVersion() {
        return this.version;
    }
    
    public void MBean.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void MBean.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MBean.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MBean attached = MBean.findMBean(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MBean.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MBean.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MBean MBean.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MBean merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MBean.entityManager() {
        EntityManager em = new MBean().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MBean.countMBeans() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MBean o", Long.class).getSingleResult();
    }
    
    public static List<MBean> MBean.findAllMBeans() {
        return entityManager().createQuery("SELECT o FROM MBean o", MBean.class).getResultList();
    }
    
    public static MBean MBean.findMBean(Long id) {
        if (id == null) return null;
        return entityManager().find(MBean.class, id);
    }
    
    public static List<MBean> MBean.findMBeanEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MBean o", MBean.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}

/*
 * File: app/controller/MoniteesController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PaaSMonitor.controller.MoniteesController', {
    extend: 'Ext.app.Controller',

    models: [
        'Phym'
    ],
    stores: [
        'MoniteeForm',
        'Vim'
    ],
    views: [
        'Monitee.Add',
        'Monitee.Choose'
    ],

    refs: [
        {
            ref: 'moniteesView',
            selector: 'choosemonitee dataview'
        },
        {
            ref: 'moniteeWindow',
            selector: 'addmonitee'
        },
        {
            ref: 'moniteeForm',
            selector: 'addmonitee moniteeform'
        }
    ],

    init: function(application) {
        Ext.create('PaaSMonitor.view.Monitee.Add');

        this.getMoniteeFormStore().addListener('load',this.finishedLoading, this);

        this.control({
            'choosemonitee dataview': {
                selectionchange: this.showAddMoniteeForm
            },
            '#add_monitee_button': {
                click: this.postData
            }
        });
    },

    showAddMoniteeForm: function(selModel, selected) {
        var window = this.getMoniteeWindow();
        window.show();
        var form = this.getMoniteeForm();
        window.setTitle('Add a New ' + selected[0].data.name);
        form.removeAll();
        var modelname =  selected[0].data.model;
        var url = 'resources/data/' + modelname + 'form.json';
        var store = this.getMoniteeFormStore();
        store.getProxy().url = url;
        store.load();
    },

    finishedLoading: function() {
        var form = this.getMoniteeForm();
        var fields = this.getMoniteeFormStore().data.items;
        for(var i=0; i< fields.length; i++){
            form.add(fields[i].data);
        }   
        this.getMoniteeWindow().show();
    },

    postData: function(button) {
        var model = this.getMoniteesView().getSelectionModel().getSelection()[0].data.model;
        var form = button.up('form'), window = form.up('window'), values = form.getValues();
        var record = Ext.ModelManager.create(values, 'PaaSMonitor.model.' + model);
        var store = this.getVimStore();
        record.save({
            success : function(record, operation) {
                form.getForm().reset();	
                var response = Ext.decode(operation.response.responseText);
                var vims = response.data;
                var name = response.message;
                store.loadData(vims);
                window.setTitle('请从下面列表中选择想要监测的虚拟机');                        
                window.layout.setActiveItem(1);
                var grid = window.down('grid');
                grid.setTitle('Available Virtual Machines on Phym' + vims[0].phym.name);



                /*instanceStore.getProxy().extraParams = {
                findAppInstances : "ByAppServer",
                appServerId : appServer.internalId
                };
                instanceStore.load();
                uppanel.layout.setActiveItem('add_appinstance-panel');
                instanceStore.getProxy().extraParams = {};	
                */
                //window.hide();
                //Ext.MessageBox.alert('提示', '已成功添加应用服务器信息');
            },
            failure: function(r, operation){
                window.hide();
                Ext.MessageBox.alert('提示', '应用服务器信息已保存，但该应用服务器目前不可用，未能获得应用实例信息');
                //uppanel.layout.setActiveItem('start-panel');
            }
        });
    }

});
